syntax = "proto3";

package relation;

import "api.proto";
import "common.proto";

option go_package = "social/relation";

message RelationActionRequest {
    string token = 1; // User authentication token
    int64 to_user_id = 2; // Target user ID
    int32 action_type = 3; // 1 - Follow, 2 - Unfollow
}

message RelationActionResponse {
    CommonResponse common_response = 1; // Includes status code and status description
}

message RelationFollowListRequest {
    UserAuth user_auth = 1; // Includes user ID and user authentication token
}

message RelationFollowListResponse {
    CommonResponse common_response = 1; // Includes status code and status description
    repeated User user_list = 2; // List of user information
}

message RelationFollowerListRequest {
    UserAuth user_auth = 1; // Includes user ID and user authentication token
}

message RelationFollowerListResponse {
    CommonResponse common_response = 1; // Includes status code and status description
    repeated User user_list = 2; // List of user information
}

message RelationFriendListRequest {
    UserAuth user_auth = 1; // Includes user ID and user authentication token
}

message RelationFriendListResponse {
    CommonResponse common_response = 1; // Includes status code and status description
    repeated FriendUser user_list = 2; // List of user information
}

message FriendUser {
    message User {
        User user = 1;
    }
    string message = 2; // latest chat messages with this friend
    int64 msg_type = 3; // 0 - Messages current requested by the user, 1 - Messages sent by the current requesting user
}

service RelationHandler {
    rpc RelationAction(RelationActionRequest) returns (RelationActionResponse) {
        option (api.post) = "/douyin/relation/action/";
        // Logged-in users follow or unfollow other users
    }

    rpc RelationFollowList(RelationFollowListRequest) returns (RelationFollowListResponse) {
        option (api.get) = "/douyin/relation/follow/list/";
        // Get a list of all users followed by the logged-in user
    }

    rpc RelationFollowerList(RelationFollowerListRequest) returns (RelationFollowerListResponse) {
        option (api.get) = "/douyin/relation/follower/list/";
        // Get a list of all fans following the logged-in user
    }

    rpc RelationFriendList(RelationFriendListRequest) returns (RelationFriendListResponse) {
        option (api.get) = "/douyin/relation/friend/list/";
        // Get a list of all friends following the logged-in user 
        // (friends refers to follow each other)
    }
}